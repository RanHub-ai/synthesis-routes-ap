# ---------------------------
# Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞
# ---------------------------
import streamlit as st
from rdkit import Chem
from rdkit.Chem import Draw
import requests
from PIL import Image
from io import BytesIO
import json

st.set_page_config(page_title="–ü—É—Ç–∏ —Å–∏–Ω—Ç–µ–∑–∞", layout="wide")

st.title("üß™ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞ –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ —Å–∏–Ω—Ç–µ–∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –º–æ–ª–µ–∫—É–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
–í–≤–µ–¥–∏—Ç–µ **SMILES** —Å—Ç—Ä–æ–∫—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.
""")

smiles = st.text_input("–í–≤–µ–¥–∏—Ç–µ SMILES –º–æ–ª–µ–∫—É–ª—ã", "CC(=O)Oc1ccccc1C(=O)O")

if st.button("üîç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —Å–∏–Ω—Ç–µ–∑–∞"):
    try:
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            st.error("–ù–µ–≤–µ—Ä–Ω–∞—è SMILES —Å—Ç—Ä–æ–∫–∞")
        else:
            st.subheader("üî¨ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–ª–µ–∫—É–ª—ã")
            st.image(Draw.MolToImage(mol, size=(300, 300)))

            st.subheader("üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å —Å–∏–Ω—Ç–µ–∑–∞ —Å –ø–æ–º–æ—â—å—é RXNMapper API")
            try:
                api_url = "https://rxnmapper.ai/api/route"
                headers = {"Content-Type": "application/json"}
                payload = json.dumps({"smiles": smiles})

                response = requests.post(api_url, headers=headers, data=payload)
                if response.status_code == 200:
                    data = response.json()
                    if "image_url" in data:
                        img_response = requests.get(data["image_url"])
                        if img_response.status_code == 200:
                            img = Image.open(BytesIO(img_response.content))
                            st.image(img, caption="–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç RXNMapper")
                        else:
                            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                    else:
                        st.warning("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏")
                else:
                    st.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ RXNMapper API")
            except Exception as api_error:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ RXNMapper: {api_error}")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

st.markdown("---")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ¬© 2025")